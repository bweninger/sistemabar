/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.barpass.orderservice.application.api;

import io.barpass.orderservice.application.model.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-02-04T12:54:47.972Z")

@Api(value = "itemPedidos", description = "the itemPedidos API")
@RequestMapping(value = "/v1")
public interface ItemPedidosApi {

    @ApiOperation(value = "Atualizar Item Pedido", nickname = "atualizarItemPedido", notes = "", response = ItemPedidoResponse.class, tags={ "AtualizarItemPedido", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemPedidoResponse.class),
        @ApiResponse(code = 400, message = "Bad Request List of supported error codes:   - 21: Missing body   - 22: Invalid body   - 23: Missing body field   - 24: Invalid body field", response = ErrorRepresentation.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorRepresentation.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorRepresentation.class),
        @ApiResponse(code = 404, message = "Not Found List of supported error codes:   - 60: Resource not found", response = ErrorRepresentation.class),
        @ApiResponse(code = 405, message = "Method Not Allowed List of supported error codes:   - 61: Method not allowed", response = ErrorRepresentation.class) })
    @RequestMapping(value = "/itemPedidos/{idItemPedido}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ItemPedidoResponse> atualizarItemPedido(@ApiParam(value = "id do Item pedido", required = true) @PathVariable("idItemPedido") String idItemPedido, @ApiParam(value = "", required = true) @Valid @RequestBody AtualizarItemPedidoRequest atualizarItemPedidoRequest);


    @ApiOperation(value = "Buscar Item Pedido", nickname = "buscarItemPedido", notes = "", response = ItemPedidoResponse.class, tags={ "BuscarItemPedido", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemPedidoResponse.class),
        @ApiResponse(code = 400, message = "Bad Request List of supported error codes:   - 21: Missing body   - 22: Invalid body   - 23: Missing body field   - 24: Invalid body field", response = ErrorRepresentation.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorRepresentation.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorRepresentation.class),
        @ApiResponse(code = 404, message = "Not Found List of supported error codes:   - 60: Resource not found", response = ErrorRepresentation.class),
        @ApiResponse(code = 405, message = "Method Not Allowed List of supported error codes:   - 61: Method not allowed", response = ErrorRepresentation.class) })
    @RequestMapping(value = "/itemPedidos/{idItemPedido}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<ItemPedidoResponse> buscarItemPedido(@ApiParam(value = "id do Item Pedido", required = true) @PathVariable("idItemPedido") String idItemPedido);


    @ApiOperation(value = "Criar Item do Pedido", nickname = "criarItemPedido", notes = "", response = ItemPedidoResponse.class, tags={ "CriarItemPedido", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = ItemPedidoResponse.class),
        @ApiResponse(code = 400, message = "Bad Request List of supported error codes:   - 21: Missing body   - 22: Invalid body   - 23: Missing body field   - 24: Invalid body field", response = ErrorRepresentation.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorRepresentation.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorRepresentation.class),
        @ApiResponse(code = 404, message = "Not Found List of supported error codes:   - 60: Resource not found", response = ErrorRepresentation.class),
        @ApiResponse(code = 405, message = "Method Not Allowed List of supported error codes:   - 61: Method not allowed", response = ErrorRepresentation.class) })
    @RequestMapping(value = "/itemPedidos",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.POST)
    ResponseEntity<ItemPedidoResponse> criarItemPedido(@ApiParam(value = "", required = true) @Valid @RequestBody CriarItemPedidoRequest criarItemPedidoRequest);


    @ApiOperation(value = "Deletar Item Pedido", nickname = "deletarItemPedido", notes = "", tags={ "DeletarItemPedido", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorRepresentation.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorRepresentation.class),
        @ApiResponse(code = 404, message = "Not Found List of supported error codes:   - 60: Resource not found", response = ErrorRepresentation.class),
        @ApiResponse(code = 405, message = "Method Not Allowed List of supported error codes:   - 61: Method not allowed", response = ErrorRepresentation.class) })
    @RequestMapping(value = "/itemPedidos/{idItemPedido}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletarItemPedido(@ApiParam(value = "id do Item Pedido", required = true) @PathVariable("idItemPedido") String idItemPedido);


    @ApiOperation(value = "Listar todos os Itens de Pedidos", nickname = "listarItemPedidos", notes = "", response = ItemPedidosResponseList.class, tags={ "ListarItemPedidos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemPedidosResponseList.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorRepresentation.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorRepresentation.class),
        @ApiResponse(code = 404, message = "Not Found List of supported error codes:   - 60: Resource not found", response = ErrorRepresentation.class),
        @ApiResponse(code = 405, message = "Method Not Allowed List of supported error codes:   - 61: Method not allowed", response = ErrorRepresentation.class) })
    @RequestMapping(value = "/itemPedidos",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<ItemPedidosResponseList> listarItemPedidos(@ApiParam(value = "Identificador do Pedido") @Valid @RequestParam(value = "idPedido", required = false) String idPedido);

}
